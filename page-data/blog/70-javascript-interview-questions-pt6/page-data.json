{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/70-javascript-interview-questions-pt6","result":{"data":{"markdownRemark":{"html":"<p>Оригинал статьи <a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\">70 JavaScript Interview Questions</a></p>\n<ul>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt1\">Часть 1</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt2\">Часть 2</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt3\">Часть 3</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt4\">Часть 4</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt5\">Часть 5</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt7\">Часть 7</a></li>\n</ul>\n<h3>51. Что такое async/await и как это работает?</h3>\n<p><em>async/await</em> - это новый способ записи асинхронного или неблокируемого кода в JavaScript. Он построен на основе <strong>промисов</strong> и делает асинхронный код более читаемым и чистым, чем в <strong>промисах</strong> и <strong>функциях обратного вызова (callbacks)</strong>. Но вам следует изучить промисы перед тем, как пользоваться async/await, потому что, как я уже указал ранее, async/await построен поверх промисов, а это значит, что под капотом все еще используются промисы.</p>\n<p>Использование промисов.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">unction <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url/to/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// какие то действия с \"data\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// какие то действия  \"err\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Использование Async/Await.</p>\n<p><strong>Примечание:</strong> Мы использовали старое выражение try/catch для перехвата любых ошибок в любой из этих асинхронных операциях внутри блока try.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url/to/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// какие то действия с \"data\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// какие то действия с \"err\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Примечание:</strong> Использование ключевого слова <em>async</em> перед <em>function</em> заставляет функцию неявно возращать промис.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">giveMeOne</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span>\n\n<span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выводит 1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Примечание:</strong> Ключевое слово <em>await</em> может быть использовано <strong>только</strong> внутри функции <strong>async</strong>. Использование ключевого слова <em>await</em> внутри любой другой функции, не являющейся асинхронной (async function) вызовет ошибку. Ключевое слово <em>await</em> ожидает возврат выражения справа от себя (предположительно промис) перед тем, как следующая линия кода будет исполнена.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">giveMeOne</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// вызовет ошибку Compile-Time Error = Uncaught SyntaxError: await is only valid in an async function</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// заканчивает эту операцию  async перед тем, как передти к</span>\n    <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// этой линии</span>\n    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">getTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// вернет 2</span></code></pre></div>\n<h3>52. В чем разница между операторами Spread и Rest?</h3>\n<p>И <strong>оператор spread</strong>, и <strong>rest параметры</strong> имеют один и тот же оператор <strong>...</strong>. Оператор <strong>spread</strong> расширяет заданный массив или другой итерируемый объект в несколько значений. А <strong>параметры Rest</strong> используются в функции или массиве, чтобы получить все аргументы или значения из функции или массива и поместить их в массив или извлечь некоторые фрагменты из функции или массива.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></code></pre></div>\n<p>В примере выше мы используем оператор <strong>spread</strong>. Когда мы вызываем функцию <strong>add</strong>, мы раcширяем массив <strong>nums</strong>. Таким образом, значением параметра <strong>a</strong> будет <strong>5</strong>, а значением <strong>b</strong> будет <strong>6</strong>. Наконец сумма будет равна <strong>11</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> current<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет 15</span></code></pre></div>\n<p>В примере выше у нас есть функция <strong>add</strong>, которая принимает любое количество аргументов, добавляет все из них и возвращает итоговое значение.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>others<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет [2,3,4,5]</span></code></pre></div>\n<p>А в этом примере мы используем оператор <strong>rest</strong> для извлечения всех оставшихся элементов массива и помещения их в отдельный массив.</p>\n<h3>53. Что такое параметры по умолчанию?</h3>\n<p><strong>Параметры по умолчанию</strong> - это новый способ оперделения переменных по умолчанию в JavaScript, который доступен в версии ES6 или ECMAScript 2015.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n  b <span class=\"token operator\">=</span> b <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Если мы не передадим никаких аргументов для 'a' или 'b' то</span>\n<span class=\"token comment\">// будет использовано значение \"параметра по умолчанию\" равное 0</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет 1</span></code></pre></div>\n<p>Мы также можем деструктуризовывать парметры по умолчанию.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> first\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет 0</span>\n<span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет 10</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nums <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> nums<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nums\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет [1, 2, 3, 4]</span>\n<span class=\"token function\">getArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nums<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет [5,4,3,2,1]</span></code></pre></div>\n<p>Мы также можем использовать параметры, определенные ранее, для параметров, отпределенных позднее.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingWithValue</span><span class=\"token punctuation\">(</span>\n  value <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomethingWithValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет \"Hello World\"</span></code></pre></div>\n<h3>54. Что такое объекты обертки (Wrapper Objects)?</h3>\n<p>Примитивные значение, такие как <strong>string</strong>, <strong>number</strong> и <strong>boolean</strong>, исключаяя <strong>null</strong> и <strong>undefined</strong>, имеют свойства не смотря на то, что они не являются <strong>объектами</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"marko\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет  \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет  \"MARKO\"</span></code></pre></div>\n<p>Значение переменной <strong>name</strong> является примитивом типа <strong>string</strong>, которое не имеет ни свойств, ни методов. Однако, в нашем примере, мы применили к этой переменной метод <strong>toUpperCase()</strong>, что не привело к ошибке, а вывело в консоль <strong>MARKO</strong>.</p>\n<p>Причина этого в том, что это <strong>примитивное</strong> значение временно конвертировалось или было приведено к типу в <strong>объект</strong>, и таким образом переменная <strong>name</strong> ведет себя как <strong>объект</strong>. Каждый <strong>примитивный тип</strong>, кроме <strong>null</strong> и <strong>undefined</strong> имеет <strong>объект обертку</strong>. Объектами обертками являются <strong>String</strong>, <strong>Number</strong>, <strong>Boolean</strong>, <strong>Symbol</strong> и <strong>BigInt</strong>.</p>\n<p>В этом случае вызовa <strong>name.toUpperCase()</strong>, под капотом выглядит так</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет  \"MARKO\"</span></code></pre></div>\n<p>Вновь созданный объект сразу же выбрасывается после того, как мы закончили работу со свойством или вызовом метода.</p>\n<h3>55. В чем разница между неявным и явным приведением типов (Implicit and Explicit Coercion)?</h3>\n<p><strong>Неявное приведение типов</strong> - это такое конвертирование значения в иной тип данных, которое осуществляется без участия программиста.</p>\n<p>Допустим у нас есть следующий код.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Первый <strong>console.log</strong> выведет в консоль <strong>16</strong>. В других языках это могло бы привести к ошибке на этапе компиляции, но в JavaScript <strong>1</strong> конвертируется в сроку, при помощи оператора <strong>+</strong> производится конкатенация строки. JavaScript все сделал за нас, автоматически.</p>\n<p>Второй <strong>console.log</strong> выведет <strong>1</strong>. Произойдет конвертация булевых значений в числовые (true - 1, false - 0). Затем произойдет сложение и в результате получаем <strong>1</strong>.</p>\n<p>Третий <strong>console.log</strong> выведет <strong>12</strong>. Произойдет конвертация <strong>'2'</strong> в числовое значение, и дальше произойдет операция умножения <strong>6</strong> на <strong>2</strong>. Все это произойдет в соответсвии с <a href=\"https://delapouite.com/ramblings/javascript-coercion-rules.html\">Правилами приведения типов JavaScript</a>.</p>\n<p>Тогда как <strong>явное приведение типов</strong> происходит при прямом контроле со стороны программиста.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>В этом примере мы используем <strong>parseInt</strong> для конвертации <strong>'6'</strong> в число. Затем происходит сложение единицы и шестерки.</p>\n<h3>56. Что такое NaN и как проверить, что значение равно NaN?</h3>\n<p><strong>NaN</strong> обозначает <strong>Not a Number (не число)</strong>. В JavaScript это такое значение, которое является результатом преоброзования числа в не число.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10a\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>JavaScript имеет встроенный метод <strong>isNaN</strong>, проверяющий значения на то, являются ли они <strong>NaN</strong>. Но этот метод ведет себя довольно странно.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span></code></pre></div>\n<p>Все эти проверки выведут в консоль <strong>true</strong>, даже если мы явно проверяем не числа.</p>\n<p>В <strong>ES6</strong> или <strong>ECMAScript 2015</strong> рекомендуется использовать метод <strong>Number.isNaN</strong>, потому что он действительно проверяет число на нечислое значение. Или же можно написать самому вспомогальную функцию, потому что <strong>NaN</strong> в JavaScript является единстенным значением, которое не равно самому себе.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkIfNaN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">!==</span> value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>57. Как узнать, что значение является массивом?</h3>\n<p>Мы можем проверить, что значение явялется массивом, с помощью метода <strong>Array.isArray</strong>, доступного из глобального объекта <strong>Array</strong>. Он возвращает <strong>true</strong>, если объект является массивом, или false - если нет.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Если ваше окружение не позволяет использовать данный метод, то вы можете использовать реализацию полифила.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>58. Как узнать, что число четное без использования операторов % или modulo?</h3>\n<p>Мы можем использовать побитовый оператор И <strong>&#x26;</strong> для решения этой проблемы. Оператор <strong>&#x26;</strong> оперирует своими операндами, обрабатывает их как двоичное значение и выполняет к ним операцию <strong>И</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>0</strong> явялется двоичным <strong>000</strong>.</p>\n<p><strong>1</strong> явялется двоичным <strong>001</strong>.</p>\n<p><strong>2</strong> явялется двоичным <strong>010</strong>.</p>\n<p><strong>3</strong> явялется двоичным <strong>011</strong>.</p>\n<p><strong>4</strong> явялется двоичным <strong>100</strong>.</p>\n<p><strong>5</strong> явялется двоичным <strong>101</strong>.</p>\n<p><strong>6</strong> явялется двоичным <strong>110</strong>.</p>\n<p><strong>7</strong> явялется двоичным <strong>111</strong>.</p>\n<p>и так далее...</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>b</th>\n<th>a &#x26; b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>Когда мы выводим в консоль выражение <strong>5 &#x26; 1</strong>, оно выводит <strong>1</strong>. Итак, сперва опертор <strong>&#x26;</strong> конвертирует оба числа в бинарное значение, <strong>5</strong> становится <strong>101</strong>, а <strong>1</strong> становится <strong>001</strong>. Затем сравнивается каждый бит (нули и единицы) с помощью оператора побитового сравнения <strong>&#x26;</strong>. <strong>101</strong> и <strong>001</strong>. Как мы видим по таблице ниже, результатом может быть только <strong>1</strong>, если и <strong>a</strong> и <strong>b</strong> являются единицами.</p>\n<table>\n<thead>\n<tr>\n<th>101 &#x26; 001</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n</tr>\n<tr>\n<td>001</td>\n</tr>\n<tr>\n<td><strong>001</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Сперва мы сравниваем самые левые биты <strong>1 &#x26; 0</strong>. Результатом будет <strong>0</strong>.</li>\n<li>Затем мы сравниваем средние биты <strong>0 &#x26; 0</strong>. Результатом будет <strong>0</strong>.</li>\n<li>Затем мы сравниваем последние биты <strong>1 &#x26; 1</strong>. Результатом будет <strong>1</strong>.</li>\n<li>Затем мы ковертируем получившееся бинарное число в десятичное число и получаем <strong>1</strong>.</li>\n</ul>\n<p>Если мы выведем в консоль выражение <strong>4 &#x26; 1</strong>, то оно вернет <strong>0</strong>. Потому что последний бит от <strong>4</strong> будет <strong>0</strong> и что выражение <strong>0 &#x26; 1</strong> возвращает 0.</p>\n<p>Если вам сложно понять побитовые операции, то вы можете просто испольовать <strong>рекурсию</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>59. Как узнать, что в объекте присутствует определенное свойство?</h3>\n<p>Существует три способа узнать, что свойство присутствует в объекте.</p>\n<p>Первый способ - использование оператора <strong>in</strong>. Синтаксис использования оператора <strong>in</strong> такой - <strong>propertyname in object</strong>. Результатом будет <strong>true</strong>, если свойство существует, или <strong>false</strong> - если нет.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token string\">\"bwahahah\"</span><span class=\"token punctuation\">,</span>\n  prop2<span class=\"token operator\">:</span> <span class=\"token string\">\"hweasa\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет false</span></code></pre></div>\n<p>Второй способ - использование метода объекта <strong>hasOwnProperty</strong>. Этот метод доступен для всех объектов javaScript. Он возвращает <strong>true</strong>, если свойство существует, или <strong>false</strong> - если нет.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Тотже объект \"o\", что и в предыдущем примере</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет false</span></code></pre></div>\n<p>Третий способ - использование нотации <strong>obj[\"prop\"]</strong>. Если свойство существует - вернется значение свойства, в обратном случае вернется <strong>undefined</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Тотже объект \"o\", что и в предыдущем примере</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">\"prop\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет \"bwahahah\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">\"prop1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет undefined</span></code></pre></div>\n<h3>60. Что такое AJAX?</h3>\n<p><strong>AJAX</strong> расшифровывается как <strong>Asynchronous JavaScript and XML (Асинхронный JavaScript и XML)</strong>. Это группа взаимосвязанных технологий, используемых для асинхронного отображения данных. Это означает, что мы можем посылать запросы на сервер и получать ответы от сервера не перегружая веб страницу.</p>\n<p>Технологии, используемые в <strong>AJAX</strong>:</p>\n<ul>\n<li><strong>HTML</strong> - структура веб страницы</li>\n<li><strong>CSS</strong> - стилизация страницы</li>\n<li><strong>JavaScript</strong> - поведение страницы и обновление <strong>DOM</strong></li>\n<li><strong>XMLHttpRequest API</strong> - используется для отправки и получения данных с сервера</li>\n<li><strong>PHP, Python, Nodejs</strong> - некоторые серверные языки</li>\n</ul>","frontmatter":{"date":"13.04.2020","path":"/blog/70-javascript-interview-questions-pt6","title":"70 вопросов собеседования JavaScript.","subTitle":"Часть 6.","tags":["translate","javascript"],"prevPostName":"Часть 5","nextPostName":"Часть 7","prevPostLink":"/blog/70-javascript-interview-questions-pt5","nextPostLink":"/blog/70-javascript-interview-questions-pt7"}}},"pageContext":{}}}