{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/70-javascript-interview-questions-pt7","result":{"data":{"markdownRemark":{"html":"<p>Оригинал статьи <a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\">70 JavaScript Interview Questions</a></p>\n<ul>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt1\">Часть 1</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt2\">Часть 2</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt3\">Часть 3</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt4\">Часть 4</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt5\">Часть 5</a></li>\n<li><a href=\"https://marsdev.ru/blog/70-javascript-interview-questions-pt6\">Часть 6</a></li>\n</ul>\n<h3>61. Какие способы создания объекта есть в Javascript?</h3>\n<p>Использование <strong>литерала объекта ( Object Literal)</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет \"Hi, I'm Mark\"</span></code></pre></div>\n<p>Использование <strong>функции конструктора</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">)</span>\n\nmark<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет \"Hi, I'm Mark\"</span></code></pre></div>\n<p>Использование метода <strong>Object.create</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// назначит прототипом объекта \"o\" объект \"n\"</span>\n\no<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Mark\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет \"Hi, I'm Mark\"</span></code></pre></div>\n<h3>62. В чем разница между методами Object.seal и Object.freeze?</h3>\n<p>Разница между этими двумя методами состоит в том, что при использовании метода <strong>Object.freeze</strong> на объекте, свойства этого объекта становятся неизменяемыми, то есть мы не можем изменять или редактировать значения этих свойств. Тогда как при использовании метода <strong>Object.seal</strong>, мы можем изменять существующие свойства объекта.</p>\n<h3>63. В чем разница между оператором in и методом hasOwnProperty в объектах?</h3>\n<p>Как вы уже знаете, оба этих метода проверяют наличие определенного свойства в объекте. И оба возвращают <strong>true</strong> или <strong>false</strong>. Разница состоит в том, что метод <strong>in</strong> так же проверяет наличие свойства в цепочке прототипов, если это свойство не находится в искомом объекте, тогда как метод <strong>hasOwnProperty</strong> производит проверку только в данном конкретном объекте, игнорируя цепочку прототипов.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Тот же объект, что и в предыдущем вопросе</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true, метод toString доступен в прототипе этого объект, то есть в Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет false, не проверяя прототип объекта</span></code></pre></div>\n<h3>64. Способы работы с асинхронным кодом в JavaScript?</h3>\n<ul>\n<li><strong>Функции обратного порядка (Callbacks)</strong></li>\n<li><strong>Промисы (Promises)</strong></li>\n<li><strong>async/await</strong></li>\n<li>Библиотеки вроде <a href=\"https://caolan.github.io/async/v3/\">async.js</a><a href=\"http://bluebirdjs.com/docs/getting-started.html\">bluebird</a><a href=\"http://documentup.com/kriskowal/q/\">q</a><a href=\"https://www.npmjs.com/package/co\">co</a></li>\n</ul>\n<h3>65 В чем разница между function expression и function declaration?</h3>\n<p>Допустим у нас есть следующий пример</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">hoistedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">notHoistedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hoistedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am hoisted\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">notHoistedFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I will not be hoisted!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Вызов <strong>notHoistedFunc</strong> приведет к ошибке, тогда как вызов <strong>hoistedFunc</strong> не приведет, потому что функция <strong>hoistedFunc</strong> <em>всплывет</em>. Подробнее смотри вопрос номер 18.</p>\n<h3>66.Сколькими способами может быть вызвана функция?</h3>\n<p>Функция в JavaScript может быть вызвана четырьмя способами. <strong>Вызов</strong> определяет значение <strong>this</strong> или \"хозяина\" объекта этой функции.</p>\n<ul>\n<li><strong>Вызов как функция</strong> - если функция не вызвана в качестве метода, конструктора или с применением методов <strong>apply</strong> или <strong>call</strong>, то она <strong>вызывается как функция</strong>. \"Хозяйским\" объектом для такой функции будет объект <strong>window</strong>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Глобальное окружение</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет объект \"window\" и вернет 6</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// выведет объект \"window\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Вызов как метод</strong> - если свойство объекта имеет в качестве значения функцию, мы зовем ее <strong>методом</strong>. Когда этот <strong>метод</strong> вызывается, значением <strong>this</strong> для этого метода будет именно этот объект.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> details <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ndetails<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// вернет Marko</span>\n<span class=\"token comment\">// значением \"this\" внутри метода \"getName\" будет объект \"details\"</span></code></pre></div>\n<ul>\n<li><strong>Вызов как конструктор</strong> - если функция будет вызвана с помощью ключевого <strong>new</strong>, то она называется <strong>функция-конструктор</strong>. Будет создан пустой объект и <strong>this</strong> будет ссылаться на него.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> yearHired</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// создается пустой объект {}</span>\n  <span class=\"token comment\">// затем ключевому слову this присваивается пустой объект</span>\n  <span class=\"token comment\">// this = {};</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearHired <span class=\"token operator\">=</span> yearHired\n  <span class=\"token comment\">// наследутеся от Employee.prototype</span>\n  <span class=\"token comment\">// возвращает значение \"this\" если</span>\n  <span class=\"token comment\">// нет явного оператора return</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> emp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko Polo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>Вызов с помощью методов apply и call</strong> - если мы хотим явно указать значение <strong>this</strong> или \"хозяйский\" объект для функции, то мы можем использовать эти методы. Эти методы доступны для всех функций.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// объектом \"this\" внутри функции \"reduceAdd\" будет \"obj1\"</span>\n<span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// объектом \"this\" внутри функции \"reduceAdd\" будет \"obj2\"</span></code></pre></div>\n<h3>67. Что такое мемоизация и для чего она используется?</h3>\n<p><em>мемоизация</em> это процесс создания функций, способных запоминать их предыдущие вычисленные результаты или значения. Польза от функций мемоизации в том, что мы избегаем вычислений этих функций, если они уже были произведены до этого с теми же аргументами. Это сокращает время вычислений. В качестве недостатка можно назвать то, что будет использоваться больше памяти для сохранения результатов предыдущих вычислений.</p>\n<h3>68. Реализация функции мемоизации</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cached\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\n      cache<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">not cached</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> toUpper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> toUpperMemoized <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>toUpper<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">toUpperMemoized</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">toUpperMemoized</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Вспомогательная функция <em>memoize</em> работает только с функцией, принимающей один аргумент. Нам нужно создать функцию <em>memoize</em>, принимающей множество аргументов.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cached\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      cache<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">not cached</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeFullName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fName<span class=\"token punctuation\">,</span> lName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduceAdd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> startingValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> startingValue<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> memoizedMakeFullName <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>makeFullName<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> memoizedReduceAdd <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>reduceAdd<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">memoizedMakeFullName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Polo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">memoizedMakeFullName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Polo\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">memoizedReduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">memoizedReduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>69. Почему typeof null возвращает object? Как проверить, что значение является null?</h3>\n<p><strong>typeof null == 'object'</strong> всегда возвращает <strong>true</strong> потому что это была первичная имплеметация объекта <strong>null</strong> в JavaScript. Было предложено изменить <strong>typeof null == 'object'</strong> на <strong>typeof null == 'null'</strong>, но это предложение было отклонено поскольку вело к возникновению слишком большого количества багов.</p>\n<p>Мы можем использовать <strong>===</strong> или <strong>оператор строгого равенства</strong> для проверки того, что значение равно <strong>null</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>70. Что делает ключевое слово new?</h3>\n<p>Ключевое слово <strong>new</strong> применяется с функцией-конструктором для создания объектов в JavaScript.</p>\n<p>Допустим у нас есть слудующий пример.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> yearHired</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearHired <span class=\"token operator\">=</span> yearHired\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> emp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko Polo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ключевое слово <strong>new</strong> делает 4 вещи:</p>\n<ul>\n<li>Создает пустой объект.</li>\n<li>Присваивает этот объект значению <strong>this</strong>.</li>\n<li>Функция будет наследоваться от <strong>functionName.prototype</strong>.</li>\n<li>Возвращает <strong>this</strong> если не используется явный оператор возврата <strong>return</strong>.</li>\n</ul>\n<p>В примере выше сперва создается пустой объект <strong>{}</strong>, затем значению <strong>this</strong> присваивается пустой объект <strong>this = {}</strong> и добавляются свойства к этому объекту <strong>this</strong>. Поскольку у нас нет явного оператора возврата <strong>return</strong> - автоматически позвращается объект <strong>this</strong>.</p>","frontmatter":{"date":"14.04.2020","path":"/blog/70-javascript-interview-questions-pt7","title":"70 вопросов собеседования JavaScript.","subTitle":"Часть 7.","tags":["translate","javascript"],"prevPostName":"Часть 6","nextPostName":"Часть 1","prevPostLink":"/blog/70-javascript-interview-questions-pt6","nextPostLink":"/blog/70-javascript-interview-questions-pt1"}}},"pageContext":{}}}